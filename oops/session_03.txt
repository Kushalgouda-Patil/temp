
1. Define constructor: It is a special function having the same name as the
class name, no return type used to intialize the data members of a class.
Types:
1. Default constructor
2. Parameterized constructor
3. Copy constuctor

//Constructor demo: First method

class A{
public:
    int a;
    A():a(0) //default constructor
    {
    }
    A(int x):a(x){ //parameterized constructor

    }
    A(const A &obj){ //copy constructor
        cout<<"copy constructor"<<endl;
    this->a=obj.a;
    }
};

int main()
{
    A obj1; //Default constructor
    A obj2(10); //Parameterized constructor
    A obj3=obj2; //Copy constructor invoked
    A obj4(obj3); //Copy constructor is invoked
    cout<<obj3.a<<endl;
    return 0;
}
===================================================================
//Constructor demo: Second method: using this operator

class A{
public:
    int a;
    int b;
    A(){
    cout<<"Default constructor"<<endl;
    this->a=0;  //this:is a pointer, self reference
    this->b=0;
    }
    // Observation: the instance variable names and formal parameters are same
    A(int a, int b){
    cout<<"Parameterized constructor"<<endl;
    this->a=a;
    this->b=b;
    }
    A(const A &obj){
    cout<<"copy constructor is invoked"<<endl;
    this->a=obj.a;
    this->b=obj.b;
    }
    void printData(){
    cout<<a<<":"<<b<<endl;
    }
};
int main(){
A obj, obj1; //default constructor
cout<<obj.a<<":"<<obj.b<<endl;
cout<<obj1.a<<":"<<obj1.b<<endl;
A obj2(10,10); //Parameterized constructor//
cout<<obj2.a<<":"<<obj2.b<<endl;
A obj3=obj2; //copy constructor is invoked
cout<<obj3.a<<":"<<obj3.b<<endl;
A obj4(obj3);//copy constructor is invoked
cout<<obj4.a<<":"<<obj4.b<<endl;
 return 0;
}
======================================================
const keyword in c++
1. The instance variable can be a constant
2. The function of a class can be a constant
3. The object can be a constant
Demo:
//const
/*
class A{
public:
    const int a=10;
};
int main(){
A obj;
//obj.a=10; //error
cout<<obj.a<<endl;
return 0;
}
*/
/*
class A{
public:
    int a;
    A(){
    this->a=10;
    }

    void printData(){
    cout<<a<<endl;
    }
    //constant function cannot change the data of a class
    void modifyData(int x)const{
    this->a+=x;
    }
};
int main(){
 A obj;
obj.modifyData(5);
obj.printData();
return 0;
}
*/
//constant object: read-only object, the const function
//can print the object data
//The constant object data cannot be modified
// Test the code:
/* 
class A{
public:
    int a;
    A(){
    this->a=0;
    }
    A(int a){
    this->a=a;
    }
    void printData(){
    cout<<this->a<<endl;
    }
    //remove the comment and comment the next function
    //void printData() const{
    //cout<<this->a<<endl;
    //}

    void modifyData(int x) const{
    a+=x;
    }
};
int main(){
const A obj(10); //constant object
//obj.printData(); //compiler ERROR. The printData() has to be constant
                 // to call on constant object
//obj.modifyData(10);
return 0;
}
*/


========================================================
Q1. Write a C++ program to model a point object on a 2D plane.
The point is described by x and y coordinates. The point object can be moved
to any location in a 2D plane and the coordinates can be reset(0,0). The C++ program shall
also print the coordinates of a point object.
Apply default, parameterized and copy constructor.

Problem solving frame work:
1. Identify object/class: Point
2. Identify the properties: xCoordinate, yCoordinate
3. Identify functions: void printPoint(), void resetPoint(), void movePoint(int a, int b)

class Point {
public:
    int xCordinate;
    int yCordinate;
    Point(){  //Default constructor
        this->xCordinate=0;
        this->yCordinate=0;
    }
    Point(int a, int b){  //Parameterized constructor
        this->xCordinate = a;
        this->yCordinate = b;
    }
    Point(const Point &obj){ //copy constructor
        this->xCordinate=obj.xCordinate;
        this->yCordinate=obj.yCordinate;
    }

    void movePoint(int a, int b){
        xCordinate = a;
        yCordinate = b;
    }
	/*
    void movePoint(int a, int b){
	xCordinate += a;
        yCordinate += b;
	}
	*/	
    void resetPoint() {
        xCordinate = 0;
        yCordinate = 0;
    }
    void shiftPoint(int a, int b) {
        xCordinate += a;
        yCordinate += b;
    }
     void printPoint(){
	cout<<xCoordinate<<yCoordinate<<endl;
 	}			
};

int main() {
    Point point1; 
    Point point2(1, 2);
    Point point3;
    point3 = point2;
    point2.movePoint(5, 6);
    point3.shiftPoint(3,4);
    point3.resetPoint();
    point1.printPoint();
    point2.printPoint();
    point3.printPoint();	
    return 0;
}
==========================================================
//Point as ADT(Abstract Data Type)
class Point{
public:
    int xCoordinate;
    int yCoordinate;
    Point();
    Point(int xCoordinate,int yCoordinate);
    Point(const Point &p);
    void movePoint(int a, int b);
    void resetPoint();
    void printPoint();
};
Point::Point(){
this->xCoordinate=0;
this->yCoordinate=0;
}
Point::Point(int xCoordinate,int yCoordinate){
this->xCoordinate=xCoordinate;
this->yCoordinate=yCoordinate;
}
Point::Point(const Point &p){
this->xCoordinate=p.xCoordinate;
this->yCoordinate=p.yCoordinate;
}
void Point::movePoint(int a, int b){
xCoordinate+=a;
yCoordinate+=b;
}
void Point::resetPoint(){
this->xCoordinate=0;
this->yCoordinate=0;
}
void Point::printPoint(){
cout<<"x:"<<xCoordinate<<" y:"<<yCoordinate<<endl;
}
int main(){
    Point point(10,10);
    point.printPoint();

    return 0;
}
=============================================================
Write a C++ to model the student object, it is described by rollNo,
name, usn, cgpa. Add the functions to print the student details and
to print the student details of having maximum cgpa.
Note: Demo for concept of constructor and object array

#include <iostream>
using namespace std;

class Student{
private:
    int rollNo;
    string name;
    string usn;
    float cgpa;
public:
    Student(){
    cin>>rollNo>>name>>usn>>cgpa;
    }
    Student(int rollNo, string name, string usn, float cgpa){
    this->rollNo=rollNo;
    this->name=name;
    this->usn=usn;
    this->cgpa=cgpa;
    }
    void displayStudent(){
    cout<<"Roll No:"<<rollNo<<"name:"<<name<<"USN:"<<usn<<"cgpa:"<<cgpa<<endl;
    }
    void displayMaxCgpaStudent(Student students[],int n)
    {
    int i,m;
    float maxi=0.0;
    for(i=0;i<n;i++){
        if(students[i].cgpa>maxi)
        {
            m=i;
            maxi=students[i].cgpa;
        }
    }
    students[m].displayStudent();
    }
    void displayStudents(Student s[],int n){
    int i;
    for(i=0;i<n;i++){
    s[i].displayStudent();
    }
    }
};
int main(){
Student s(1001,"a","123",5.5);
s.displayStudent();
//int i;
Student s1(1001,"a","123",5.5),s2(1002,"a","123",6.5),s3(1003,"a","123",7.5);
//Create array of students
Student students[]={s1,s2,s3};
//Passing array of objects to function
s.displayMaxCgpaStudent(students,3);

s.displayStudents(students,3);
return 0;
}
===========================================================================


